# app.py

import streamlit as st
import pandas as pd
import numpy as np
import os
import io
from document_parser import get_text_from_file
from llm_handler import (
    extract_data_from_text, 
    normalize_and_group_items, 
    generate_tender_insight,
    generate_search_query,
    analyze_search_results
)
from internet_search import google_search

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def load_file_bytes(filepath):
    try:
        with open(filepath, "rb") as f: return f.read()
    except FileNotFoundError: return None

def to_excel(df: pd.DataFrame):
    output = io.BytesIO()
    df_for_excel = df.fillna('')
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df_for_excel.to_excel(writer, index=False, sheet_name='–°—Ä–∞–≤–Ω–µ–Ω–∏–µ')
    return output.getvalue()

# --- UI –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ---
st.set_page_config(layout="wide", page_title="–¢–µ–Ω–¥–µ—Ä-–≠–∫—Å–ø–µ—Ä—Ç")
st.title("AI-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¢–µ–Ω–¥–µ—Ä-–≠–∫—Å–ø–µ—Ä—Ç")
st.write("–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –ø–æ–∏—Å–∫–∞ –ª—É—á—à–∏—Ö —Ü–µ–Ω –Ω–∞ —Ä—ã–Ω–∫–µ.")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ ---
if 'demo_mode' not in st.session_state:
    st.session_state.demo_mode = False
if 'analysis_results' not in st.session_state:
    st.session_state.analysis_results = None

# --- –°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ ---
tab1, tab2 = st.tabs(["üìÅ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π", "üåê –ü–æ–∏—Å–∫ –ø–æ —Ä—ã–Ω–∫—É"])

# --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π –≤–∫–ª–∞–¥–∫–∏ ---
with tab1:
    st.header("–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–∞–π–ª–æ–≤")
    DEMO_FILES_DIR = "demo_files"
    try:
        demo_filenames = sorted([f for f in os.listdir(DEMO_FILES_DIR) if os.path.isfile(os.path.join(DEMO_FILES_DIR, f))])
    except FileNotFoundError: demo_filenames = []

    if demo_filenames:
        with st.container(border=True):
            st.subheader("‚ú® –ù–µ—Ç —Å–≤–æ–∏—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ–¥ —Ä—É–∫–æ–π?")
            st.write("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—à –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π:")
            if st.button("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–º–æ-—Ñ–∞–π–ª—ã", type="primary"):
                st.session_state.demo_mode = True
                st.session_state.uploader_key = (st.session_state.get('uploader_key', 0) + 1)
                st.session_state.analysis_results = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                st.rerun()
            
            st.markdown("–ò–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –∏—Ö, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:"); cols = st.columns(len(demo_filenames))
            for i, filename in enumerate(demo_filenames):
                with cols[i]:
                    file_path = os.path.join(DEMO_FILES_DIR, filename)
                    file_bytes = load_file_bytes(file_path)
                    if file_bytes:
                        st.download_button(label=f"üìÑ {filename}", data=file_bytes, file_name=filename)
    st.markdown("---")
    
    st.subheader("–ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–∏ —Ñ–∞–π–ª—ã:")
    uploaded_files = st.file_uploader(
        "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã, –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ –∏—Ö —Å—é–¥–∞", # –≠—Ç–æ –∏ –µ—Å—Ç—å –Ω–æ–≤—ã–π label
        accept_multiple_files=True,
        type=['pdf', 'xlsx', 'docx'],
        # label_visibility="collapsed" <- –£–ë–ò–†–ê–ï–ú –∏–ª–∏ –º–µ–Ω—è–µ–º –Ω–∞ "visible"
        key=f"uploader_{st.session_state.get('uploader_key', 0)}"
    )
    if uploaded_files:
        st.session_state.demo_mode = False
        st.session_state.analysis_results = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

    files_to_process = []
    if st.session_state.demo_mode:
        for filename in demo_filenames:
            file_path = os.path.join(DEMO_FILES_DIR, filename)
            file_bytes = load_file_bytes(file_path)
            if file_bytes: files_to_process.append({"name": filename, "data": file_bytes})
    elif uploaded_files:
        for uploaded_file in uploaded_files:
            files_to_process.append({"name": uploaded_file.name, "data": uploaded_file.getvalue()})

    if st.session_state.demo_mode: st.success("–í—ã–±—Ä–∞–Ω –¥–µ–º–æ-—Ä–µ–∂–∏–º. –ù–∞–∂–º–∏—Ç–µ '–°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

    st.header("–®–∞–≥ 2: –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–Ω–∞–ª–∏–∑")
    if st.button("–°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", disabled=not files_to_process, key="compare_button"):
        with st.spinner("–í—ã–ø–æ–ª–Ω—è—é –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑..."):
            all_items = []
            with st.status("–ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...", expanded=True) as status:
                for file_info in files_to_process:
                    filename, file_data = file_info["name"], file_info["data"]
                    st.write(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filename}...")
                    text = get_text_from_file(io.BytesIO(file_data), filename)
                    supplier_name = filename.split('.')[0]
                    extracted_items = extract_data_from_text(text, supplier_name)
                    if extracted_items: all_items.extend(extracted_items)
                    else: st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞: {filename}")
                status.update(label="‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!", state="complete")

            if all_items:
                normalized_data = normalize_and_group_items(all_items)
                if normalized_data:
                    suppliers = sorted(list(set(item['supplier'] for item in all_items)))
                    table_data = []
                    for group in normalized_data:
                        row = {"–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": group['canonical_name']}
                        offers_by_supplier = {offer['supplier']: offer.get('price_per_unit') for offer in group['offers']}
                        for supplier in suppliers:
                            price = offers_by_supplier.get(supplier)
                            row[supplier] = float(price) if price is not None else np.nan
                        table_data.append(row)
                    df = pd.DataFrame(table_data)
                    insight_text = generate_tender_insight(df.to_json(orient='records', force_ascii=False), {s: df[s].sum() for s in suppliers})
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –í–°–ï —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–µ—Å—Å–∏—é
                    st.session_state.analysis_results = {
                        "df": df,
                        "insight_text": insight_text,
                        "suppliers": suppliers
                    }
                else: st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏–∏.")
            else: st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –Ω–∏ –∏–∑ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
    
    # --- –ë–õ–û–ö –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏) ---
    if st.session_state.analysis_results:
        st.success("üéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∏–∂–µ:")
        
        df = st.session_state.analysis_results["df"]
        insight_text = st.session_state.analysis_results["insight_text"]
        suppliers = st.session_state.analysis_results["suppliers"]
        
        def highlight_min_universal(s):
            if s.count() == 0: return ['' for _ in s]
            min_val = s.min()
            return ['border: 2px solid #3c78e4; font-weight: bold;' if v == min_val else '' for v in s]
        
        styled_df = df.style.apply(highlight_min_universal, axis=1, subset=suppliers).format({s: "{:,.2f}" for s in suppliers}, na_rep="‚Äî")
        st.dataframe(styled_df, use_container_width=True, hide_index=True)
        
        excel_data = to_excel(df)
        st.download_button(label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel", data=excel_data, file_name="tender_expert_report.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
        
        st.markdown("---")
        st.subheader("–ò—Ç–æ–≥–æ–≤—ã–µ —Å—É–º–º—ã –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º")
        totals = {"–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞": "**–ò–¢–û–ì–û**"}
        for s in suppliers:
            totals[s] = f"**{df[s].sum():,.2f} ‚ÇΩ**" if df[s].sum() > 0 else "‚Äî"
        cols = st.columns(len(df.columns))
        for i, col_name in enumerate(df.columns):
            with cols[i]:
                st.markdown(f"**{col_name}**"); st.markdown(totals.get(col_name, ''))
        
        st.markdown("---")
        st.info(f"**–ò–Ω—Å–∞–π—Ç –æ—Ç AI-–∞–≥–µ–Ω—Ç–∞:**\n\n{insight_text}")

# --- –õ–æ–≥–∏–∫–∞ –¥–ª—è –≤—Ç–æ—Ä–æ–π –≤–∫–ª–∞–¥–∫–∏ ---
with tab2:
    # ... –∫–æ–¥ –¥–ª—è –≤—Ç–æ—Ä–æ–π –≤–∫–ª–∞–¥–∫–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    st.header("–ù–∞–π–¥–∏—Ç–µ –ª—É—á—à–µ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ")
    item_to_search = st.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, –ü–æ–¥—à–∏–ø–Ω–∏–∫ 6205-2RS")
    if st.button("üîç –ù–∞–π—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", disabled=not item_to_search, key="search_button"):
        with st.spinner("–§–æ—Ä–º–∏—Ä—É—é –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å..."):
            search_query = generate_search_query(item_to_search)
            st.write(f"–ò—â–µ–º –ø–æ –∑–∞–ø—Ä–æ—Å—É: *¬´{search_query}¬ª*")
        with st.spinner("–í—ã–ø–æ–ª–Ω—è—é –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ..."):
            search_results = google_search(search_query)
        if not search_results:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.")
        else:
            with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è..."):
                offers = analyze_search_results(search_results, item_to_search)
            if not offers:
                st.warning("–ü–æ–∏—Å–∫ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–æ AI-–∞–≥–µ–Ω—Ç –Ω–µ —Å–º–æ–≥ –∏–∑–≤–ª–µ—á—å –∏–∑ –Ω–∏—Ö –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
            else:
                prices = [o['price'] for o in offers if 'price' in o and o['price'] is not None and o['price'] > 0]
                if prices:
                    st.metric(label="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –Ω–∞ —Ä—ã–Ω–∫–µ (–ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º)", value=f"~ {sum(prices) / len(prices):,.2f} ‚ÇΩ")
                else:
                    st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã.")
                with st.expander(f"–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ({len(offers)} —à—Ç.)"):
                    sorted_offers = sorted(offers, key=lambda x: x.get('price', float('inf')))
                    for offer in sorted_offers:
                        with st.container(border=True):
                            col1, col2 = st.columns([3, 1])
                            with col1:
                                st.subheader(offer.get('supplier_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫'))
                                st.markdown(f"*{offer.get('snippet', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è...')}*")
                                st.markdown(f"[–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É]({offer.get('link')})", unsafe_allow_html=True)
                            with col2:
                                price = offer.get('price')
                                if price:
                                    st.metric(label="–¶–µ–Ω–∞", value=f"{price:,.2f} ‚ÇΩ")
                                else:
                                    st.metric(label="–¶–µ–Ω–∞", value="–ù–µ –Ω–∞–π–¥–µ–Ω–∞")

# --- –ü–ª–∞—à–∫–∞-–¥–∏—Å–∫–ª–µ–π–º–µ—Ä –≤ —Ñ—É—Ç–µ—Ä–µ ---
st.divider()
st.caption("Proof of Concept (v0.1). –≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∞—è –æ—Å–Ω–æ–≤–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é. –ü—Ä–æ–µ–∫—Ç –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–æ—Ä–∞–±–æ—Ç–æ–∫ –∏ —É–ª—É—á—à–µ–Ω–∏—è. –ú—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.")